AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This AWS CloudFormation template installs the Aqua Command Center components
  in ECS EC2.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: ECS Infrastructure Configuration
        Parameters:
          - ECSClusterName
          - EcsSecurityGroupId
          - VpcId
          - VpcCidr
          - LbSubnets
          - SSLCert
          - LBScheme
      - Label:
          default: Aqua Security Configuration
        Parameters:
          - AquaConsoleAccess
          - AquaServerImage
          - AquaGatewayImage
          - AquaEnforcerImage
          - BatchInstallToken
          - ActiveActive
          - Taskprivileged
          - AquaLogLevel
          - AquaPassword
      - Label:
          default: TLS Configuration
        Parameters:
          - TLSEnabled
          - TLSRootCA
          - AquaServerCrt
          - AquaServerKey
          - AquaGatewayCrt
          - AquaGatewayKey
          - AquaEnforcerCrt
          - AquaEnforcerKey
          - TlsVerify
      - Label:
          default: Aqua Manage DB Configuration
        Parameters:
          - AquaDBInstanceEndPointURL
          - AquaDBUserName
          - AquaDBPassword
          - AuditRDS
          - AuditDBInstanceEndPointURL
          - AuditDBUserName  
          - AuditDBPassword  
    ParameterLabels:
      ECSClusterName:
        default: ECS cluster name
      VpcId:
        default: VPC ID
      VpcCidr:
        default: VPC CIDR
      LbSubnets:
        default: Aqua LB Subnets
      AquaConsoleAccess:
        default: Web Console Source
      SSLCert:
        default: SSL cert ARN
      Taskprivileged:
        default: Task Privileged
      AquaLogLevel:
        default: Aqua log level
Parameters:
  BatchInstallToken:
    Type: String
    Description: A string used as the token in the Aqua Enforcer Install command.
  AquaServerImage:
    Type: String
    Description: Enter server image path on ECR
  AquaGatewayImage:
    Type: String
    Description: Enter gateway image path on ECR
  AquaEnforcerImage:
    Type: String
    Description: Enter enforcer image path on ECR
  ECSClusterName:
    Description: Existing ECS cluster name
    Type: String
    MinLength: '5'
    MaxLength: '25'
  EcsSecurityGroupId:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description: The security group assigned to the ECS cluster or ECS Instances during cluster creation
  VpcId:
    Description: VpcId to deploy into
    Type: 'AWS::EC2::VPC::Id'
  VpcCidr:
    Description: 'For use by load balancer service polling. Enter VPC CIDR. Ex: 10.0.0.0/16'
    Type: String
  LbSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Select external subnets if you need internet access.
  LBScheme:
    Type: String
    Default: internet-facing
    AllowedValues:
      - internet-facing
      - internal
  AquaConsoleAccess:
    Description: >-
      The Default(0.0.0.0/0) CIDR range will provide global access for Aqua
      Console. Please update your own IP address or CIDR range to restric the
      Aqua Console access.
    Default: 0.0.0.0/0
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  AquaDBInstanceEndPointURL:
    Description: Enter Endpoint URL of Aqua DB
    Type: String
  AquaDBUserName:
    Description: Enter Aqua DB User name
    Type: String
  AquaDBPassword:
    NoEcho: true
    Description: Enter Aqua DB password
    Type: String
  AuditRDS:
    Description: Select Yes if you are having a seperate RDS endpoing for Audit
    Default: 'No'
    Type: String
    AllowedValues: ['Yes', 'No']
  AuditDBInstanceEndPointURL:
    Description: Enter Endpoint URL of Audit DB
    Type: String
  AuditDBUserName:
    Description: Enter Audit DB User name
    Type: String
  AuditDBPassword:
    NoEcho: true
    Description: Enter Audit DB password
    Type: String
  SSLCert:
    Type: String
    Description: ARN of the SSL cert to be used with console web UI LB
  ActiveActive:
    Description: Active Active configuration for aqua console
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  Taskprivileged:
    Description: Select false to run enforcer in non-privileged mode. defualt is privileged mode.
    Type: String 
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  TLSEnabled:
    Description: >-
      Enable mTLS/TLS establishment between server <-> gateway and https for
      aqua console
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  TLSRootCA:
    Description: The ARN of the root certificate stored in AWS Secrets Manager.
    Type: String
  AquaServerCrt:
    Description: The ARN of the Aqua server certificate stored in AWS Secrets Manager.
    Type: String
  AquaServerKey:
    Description: The ARN of the Aqua server certificate key stored in AWS Secrets Manager.
    Type: String
  AquaGatewayCrt:
    Description: The ARN of the Aqua gateway certificate stored in AWS Secrets Manager.
    Type: String
  AquaGatewayKey:
    Description: The ARN of the Aqua gateway certificate key stored in AWS Secrets Manager.
    Type: String
  AquaEnforcerCrt:
    Description: The ARN of the Aqua enforcer certificate stored in AWS Secrets Manager.
    Type: String
  AquaEnforcerKey:
    Description: The ARN of the Aqua enforcer certificate key stored in AWS Secrets Manager.
    Type: String
  TlsVerify:
    Description: Enable mTLS/TLS between enforcer and gateway
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  AquaLogLevel:
    Description: Aqua log level, by default set to INFO
    Type: String
    Default: "INFO"
    AllowedValues:
      - "WARN"
      - "DEBUG"
      - "INFO"
      - "ERROR"
  AquaPassword:
    Type: String
    Description: Use this Aqua admin password
    NoEcho: true
Conditions:
  CreateActiveActive: !Equals [ !Ref ActiveActive, 'true' ]
  CreateAuditrds: !Equals [!Ref AuditRDS, 'Yes']
  TLSEnable: !Equals
    - !Ref TLSEnabled
    - 'true'
  AquaTlsVerify: !Equals
    - !Ref TlsVerify
    - 'true'
Resources:
  #Role for generating a Random string
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: '*'
  RandomStringLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import cfnresponse
          from random import choice
          from string import ascii_lowercase, digits
          def random_string(length=8, chars=ascii_lowercase + digits):
            return "".join(choice(chars) for x in range(length))
          def lambda_handler(event, context):
            print(f"Data in event: {event}")
            response_data = {}
            if event["RequestType"] == "Create":
              string_length = int(event["ResourceProperties"]["Length"])
              physicalResourceId = random_string(string_length)
              response_data = { "RandomString": physicalResourceId }
          
            else: # if event["RequestType"] == "Update" or event["RequestType"] == "Delete":
              physicalResourceId = event["PhysicalResourceId"]
            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)
  RandomString:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      Length: 5
      ServiceToken: !GetAtt RandomStringLambdaFunction.Arn
  AquaConsoleLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - EcsSecurityGroupIngress1
      - EcsSecurityGroupIngress2
      - EcsSecurityGroupIngress3
      - EcsSecurityGroupIngress4
      - EcsSecurityGroupIngress5
    Properties:
      Name: !Join ["-", ["AquaConsoleLB", !GetAtt RandomString.RandomString]]
      Scheme: !Ref LBScheme
      SecurityGroups:
        - !Ref AquaConsoleSecurityGroup
      Subnets: !Ref LbSubnets
      Type: application
  AquaConsoleTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - AquaConsoleLogs
    Properties:
      Family: !Join ["-", ["aqua-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RequiresCompatibilities:
        - EC2
      Volumes:
        - Host:
            SourcePath: /var/run/docker.sock
          Name: docker-socket
        - !If
          - TLSEnable
          - Name: secret-vol
            DockerVolumeConfiguration:
              Scope: task
              Driver: local
          - !Ref 'AWS::NoValue'
      ContainerDefinitions:
        - Name: !Join ["-", ["aqua-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          Image: !Ref AquaServerImage
          Cpu: '1024'
          Ulimits:
            - Name: nofile
              SoftLimit: '1048576'
              HardLimit: '1048576'
          MountPoints:
            - ContainerPath: /var/run/docker.sock
              SourceVolume: docker-socket
            - !If
              - TLSEnable
              - ContainerPath: /tmp
                SourceVolume: secret-vol
              - !Ref 'AWS::NoValue'
          PortMappings:
            - ContainerPort: '8080'
              HostPort: '8080'
              Protocol: tcp
            - ContainerPort: '8443'
              HostPort: '8443'
              Protocol: tcp
          Memory: '2048'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['-', ['/aqua/console', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: aquaConsole
          Essential: true
          Secrets:
            - Name: SCALOCK_DBPASSWORD
              ValueFrom: !Ref SecretP
            - Name: SCALOCK_AUDIT_DBPASSWORD
              ValueFrom: !If [CreateAuditrds, !Ref SecretAuditP, !Ref SecretP]
            - Name: SCALOCK_DBUSER
              ValueFrom: !Ref SecretU
            - Name: SCALOCK_AUDIT_DBUSER
              ValueFrom: !If [CreateAuditrds, !Ref SecretAuditU, !Ref SecretU]
            - Name: BATCH_INSTALL_TOKEN
              ValueFrom: !Ref Secret1
            - Name: AQUA_PUBSUB_DBPASSWORD
              ValueFrom: !Ref SecretP
            - Name: AQUA_PUBSUB_DBUSER
              ValueFrom: !Ref SecretU
            - Name: ADMIN_PASSWORD
              ValueFrom: !Ref SecretAquaPassword
          Environment:
            - Name: SCALOCK_LOG_LEVEL
              Value: !Ref AquaLogLevel
            - Name: AQUA_GRPC_MODE
              Value: 1
            - Name: SCALOCK_DBSSL
              Value: require
            - Name: SCALOCK_AUDIT_DBSSL
              Value: require
            - Name: SCALOCK_DBNAME
              Value: scalock
            #            - Name: BATCH_INSTALL_NAME
            #              Value: ECS
            #            - Name: BATCH_INSTALL_GATEWAY
            #              Value: !GetAtt AquaConsoleLB.DNSName
            - Name: SCALOCK_DBHOST
              Value: !Ref AquaDBInstanceEndPointURL
            - Name: SCALOCK_AUDIT_DBNAME
              Value: slk_audit
            - Name: SCALOCK_AUDIT_DBHOST
              Value: !If [CreateAuditrds, !Ref AuditDBInstanceEndPointURL, !Ref AquaDBInstanceEndPointURL]
            - Name: AQUA_PUBSUB_DBSSL
              Value: !If [CreateActiveActive, require, !Ref "AWS::NoValue"]
            - Name: AQUA_PUBSUB_DBNAME
              Value: !If [CreateActiveActive, pubsub, !Ref "AWS::NoValue"]
            - Name: AQUA_PUBSUB_DBHOST
              Value: !If [CreateActiveActive, !Ref AquaDBInstanceEndPointURL, !Ref "AWS::NoValue"]
            - Name: AQUA_CLUSTER_MODE
              Value: !If [CreateActiveActive, active-active, !Ref "AWS::NoValue"]
            - Name: AQUA_PRIVATE_KEY
              Value: !If [TLSEnable, /tmp/key.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_PUBLIC_KEY
              Value: !If [TLSEnable, /tmp/cert.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_ROOT_CA
              Value: !If [TLSEnable, /tmp/root_ca.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_VERIFY_ENFORCER
              Value: !If
                - AquaTlsVerify  # Condition: If AquaTlsVerify is true
                - "1"        # Value if AquaTlsVerify is true
                - "0"        # Value if AquaTlsVerify is not true
        # Conditional container definition for TLSEnable
        - !If
          - TLSEnable
          - Name: secret-sidecar-root-ca
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-root-ca
            Environment:
              - Name: SECRET_ARN
                Value: !Ref TLSRootCA
              - Name: SECRET_FILENAME
                Value: root_ca.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-server-crt
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-server-crt
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaServerCrt
              - Name: SECRET_FILENAME
                Value: cert.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-server-key
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-server-key
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaServerKey
              - Name: SECRET_FILENAME
                Value: key.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
      NetworkMode: bridge
      TaskRoleArn: !GetAtt AquaEcsTaskRole.Arn
      ExecutionRoleArn: !GetAtt AquaEcsTaskRole.Arn
  AquaConsoleService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - AquaConsoleListener
      - AquaConsoleGrpcListener
    Properties:
      Cluster: !Ref ECSClusterName
      LaunchType: EC2
      ServiceName: !Join ["-", ["aqua-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      DesiredCount: '1'
      PlacementStrategies:
        - Type: spread
          Field: 'attribute:ecs.availability-zone'
        - Type: spread
          Field: instanceId
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      LoadBalancers:
        - ContainerName: !Join ["-", ["aqua-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          ContainerPort: '8080'
          TargetGroupArn: !Ref AquaConsoleTargetGroup
        - ContainerName: !Join ["-", ["aqua-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          ContainerPort: '8443'
          TargetGroupArn: !Ref AquaConsoleGrpcTargetGroup
      TaskDefinition: !Ref AquaConsoleTaskDefinition
  AquaConsoleListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AquaConsoleTargetGroup
      LoadBalancerArn: !Ref AquaConsoleLB
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCert
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
  AquaConsoleGrpcListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AquaConsoleGrpcTargetGroup
      LoadBalancerArn: !Ref AquaConsoleLB
      Port: '8442'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCert
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
  AquaConsoleTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - AquaConsoleLB
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Join ["-", ["aqua-console", !Join ["-", ["tg", !GetAtt RandomString.RandomString]]]]
      Port: '8080'
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  AquaConsoleGrpcTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - AquaConsoleLB
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthyThresholdCount: 2
      HealthCheckPath: "/"
      Matcher:
        GrpcCode: '0-99'
      Name: !Join ["-", ["aqua-console", !Join ["-", ["grpc-tg", !GetAtt RandomString.RandomString]]]]
      Port: '8443'
      Protocol: HTTPS
      ProtocolVersion: GRPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
  AquaGatewayGrpcListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - AquaConsoleGrpcTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AquaGatewayGrpcTargetGroup
      LoadBalancerArn: !Ref AquaConsoleLB
      Port: '8443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCert
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
  AquaGatewayGrpcTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - AquaConsoleLB
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPath: "/"
      Matcher:
        GrpcCode: '0-99'
      Name: !Join ["-", ["aqua-gateway", !Join ["-", ["grpc-tg", !GetAtt RandomString.RandomString]]]]
      Port: '8443'
      Protocol: HTTPS
      ProtocolVersion: GRPC
      VpcId: !Ref VpcId
  AquaGatewayHealthListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - AquaConsoleGrpcTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AquaGatewayHealthTargetGroup
      LoadBalancerArn: !Ref AquaConsoleLB
      Port: '8089'
      Protocol: HTTP
  AquaGatewayHealthTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - AquaConsoleLB
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Join ["-", ["aqua-gateway", !Join ["-", ["health-tg", !GetAtt RandomString.RandomString]]]]
      Port: '8089'
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  AquaGatewayTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - AquaGatewayLogs
    Properties:
      Family: !Join ["-", ["aqua-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      TaskRoleArn: !GetAtt AquaEcsTaskRole.Arn
      ExecutionRoleArn: !GetAtt AquaEcsTaskRole.Arn
      RequiresCompatibilities:
        - EC2
      Volumes:
        - !If
          - TLSEnable
          - Name: secret-vol
            DockerVolumeConfiguration:
              Scope: task
              Driver: local
          - !Ref 'AWS::NoValue'
      ContainerDefinitions:
        - Name: !Join ["-", ["aqua-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          Image: !Ref AquaGatewayImage
          Ulimits:
            - Name: nofile
              SoftLimit: '1048576'
              HardLimit: '1048576'
          MountPoints:
            - !If
              - TLSEnable
              - ContainerPath: /tmp
                SourceVolume: secret-vol
              - !Ref 'AWS::NoValue'
          PortMappings:
            - ContainerPort: '8443'
              HostPort: '8443'
              Protocol: tcp
            - ContainerPort: '8089'
              HostPort: '8089'
              Protocol: tcp
          Cpu: '1024'
          Memory: '2048'
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['-', ['/aqua/gateway', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: aquaGateway
          Secrets:
            - Name: SCALOCK_DBPASSWORD
              ValueFrom: !Ref SecretP
            - Name: SCALOCK_AUDIT_DBPASSWORD
              ValueFrom: !If [CreateAuditrds, !Ref SecretAuditP, !Ref SecretP]
            - Name: SCALOCK_DBUSER
              ValueFrom: !Ref SecretU
            - Name: SCALOCK_AUDIT_DBUSER
              ValueFrom: !If [CreateAuditrds, !Ref SecretAuditU, !Ref SecretU]
          Environment:
            - Name: SCALOCK_LOG_LEVEL
              Value: !Ref AquaLogLevel
            - Name: SCALOCK_DBSSL
              Value: require
            - Name: SCALOCK_AUDIT_DBSSL
              Value: require
            - Name: HEALTH_MONITOR
              Value: '0.0.0.0:8089'
            - Name: SCALOCK_DBNAME
              Value: scalock
            - Name: SCALOCK_DBHOST
              Value: !Ref AquaDBInstanceEndPointURL
            - Name: SCALOCK_AUDIT_DBNAME
              Value: slk_audit
            - Name: SCALOCK_AUDIT_DBHOST
              Value: !If [CreateAuditrds, !Ref AuditDBInstanceEndPointURL, !Ref AquaDBInstanceEndPointURL]
            - Name: AQUA_CONSOLE_SECURE_ADDRESS
              Value: !Sub "${AquaConsoleLB.DNSName}:8442"
            - Name: AQUA_PRIVATE_KEY
              Value: !If [TLSEnable, /tmp/key.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_PUBLIC_KEY
              Value: !If [TLSEnable, /tmp/cert.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_ROOT_CA
              Value: !If [TLSEnable, /tmp/root_ca.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_VERIFY_ENFORCER
              Value: !If
                - AquaTlsVerify  # Condition: If AquaTlsVerify is true
                - "1"        # Value if AquaTlsVerify is true
                - "0"        # Value if AquaTlsVerify is not true
        # Conditional container definition for TLSEnable
        - !If
          - TLSEnable
          - Name: secret-sidecar-root-ca
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-root-ca
            Environment:
              - Name: SECRET_ARN
                Value: !Ref TLSRootCA
              - Name: SECRET_FILENAME
                Value: root_ca.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-gateway-crt
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-gateway-crt
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaGatewayCrt
              - Name: SECRET_FILENAME
                Value: cert.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-gateway-key
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-gateway-key
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaGatewayKey
              - Name: SECRET_FILENAME
                Value: key.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
      NetworkMode: bridge
  AquaGatewayService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - AquaConsoleLB
      - AquaGatewayHealthListener
      - AquaGatewayGrpcListener
      - EcsSecurityGroupIngress4
    Properties:
      Cluster: !Ref ECSClusterName
      ServiceName: !Join ["-", ["aqua-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      DesiredCount: '1'
      PlacementStrategies:
        - Type: spread
          Field: 'attribute:ecs.availability-zone'
        - Type: spread
          Field: instanceId
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      LoadBalancers:
        - ContainerName: !Join ["-", ["aqua-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          ContainerPort: '8443'
          TargetGroupArn: !Ref AquaGatewayGrpcTargetGroup
        - ContainerName: !Join ["-", ["aqua-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          ContainerPort: '8089'
          TargetGroupArn: !Ref AquaGatewayHealthTargetGroup
      TaskDefinition: !Ref AquaGatewayTaskDefinition
  AquaEnforcerTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - AquaGatewayService
    Properties:
      PidMode: 'host'
      ContainerDefinitions:
        - Memory: '1024'
          Essential: true
          MountPoints:
            - ContainerPath: /var/run
              SourceVolume: var-run
            - ContainerPath: /dev
              SourceVolume: dev
            - ContainerPath: /host/opt/aquasec
              SourceVolume: aquasec
              ReadOnly: true
            - ContainerPath: /opt/aquasec/tmp
              SourceVolume: aquasec-tmp
            - ContainerPath: /opt/aquasec/audit
              SourceVolume: aquasec-audit
            - ContainerPath: /data
              SourceVolume: data
            - ContainerPath: /host/proc
              SourceVolume: proc
              ReadOnly: true
            - ContainerPath: /host/sys
              SourceVolume: sys
              ReadOnly: true
            - ContainerPath: /host/etc
              SourceVolume: etc
              ReadOnly: true
            - !If
              - TLSEnable
              - ContainerPath: /tmp
                SourceVolume: secret-vol
              - !Ref 'AWS::NoValue'
          Name: aqua-enforcer
          Privileged: !Ref Taskprivileged
          LinuxParameters:
            Capabilities:
              ADD:
                - SYS_ADMIN
                - NET_ADMIN
                - NET_RAW
                - SYS_PTRACE
                - KILL
                - MKNOD
                - SETGID
                - SETUID
                - SYS_MODULE
                - AUDIT_CONTROL
                - SYSLOG
                - SYS_CHROOT
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['-', ['/aqua/enforcer', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: aquaEnforcer
          Secrets:
            - Name: AQUA_TOKEN
              ValueFrom: !Ref Secret1
          Environment:
            - Name: AQUA_SERVER
              Value: !Join [":", [!GetAtt AquaConsoleLB.DNSName, "8443"]]
            - Name: SILENT
              Value: 'yes'
            - Name: RESTART_CONTAINERS
              Value: 'no'
            - Name: AQUA_LOGICAL_NAME
              Value: !Join ["-", [!Join ["-", ["aqua-enf-td", !GetAtt RandomString.RandomString]], "ECS"]]
            - Name: AQUA_PRIVATE_KEY
              Value: !If [TLSEnable, /tmp/key.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_PUBLIC_KEY
              Value: !If [TLSEnable, /tmp/cert.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_ROOT_CA
              Value: !If [TLSEnable, /tmp/root_ca.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_TLS_VERIFY
              Value: !Ref TlsVerify
          Image: !Ref AquaEnforcerImage
          Cpu: '512'
        # Conditional container definition for TLSEnable
        - !If
          - TLSEnable
          - Name: secret-sidecar-root-ca
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-root-ca
            Environment:
              - Name: SECRET_ARN
                Value: !Ref TLSRootCA
              - Name: SECRET_FILENAME
                Value: root_ca.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-enforcer-crt
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-enforcer-crt
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaEnforcerCrt
              - Name: SECRET_FILENAME
                Value: cert.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-enforcer-key
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-enforcer-key
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaEnforcerKey
              - Name: SECRET_FILENAME
                Value: key.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
      Volumes:
        - Host:
            SourcePath: /var/run
          Name: var-run
        - Host:
            SourcePath: /dev
          Name: dev
        - Host:
            SourcePath: /opt/aquasec/data
          Name: data
        - Host:
            SourcePath: /opt/aquasec
          Name: aquasec
        - Host:
            SourcePath: /opt/aquasec/tmp
          Name: aquasec-tmp
        - Host:
            SourcePath: /opt/aquasec/audit
          Name: aquasec-audit
        - Host:
            SourcePath: /proc
          Name: proc
        - Host:
            SourcePath: /sys
          Name: sys
        - Host:
            SourcePath: /etc
          Name: etc
        - !If
          - TLSEnable
          - Name: secret-vol
            DockerVolumeConfiguration:
              Scope: task
              Driver: local
          - !Ref 'AWS::NoValue'
      Family: !Join ["-", ["aqua-enforcer", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      ExecutionRoleArn: !GetAtt AquaEcsTaskRole.Arn
  AquaEnforcerDaemon:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSClusterName
      #      SchedulingStrategy: DAEMON
      ServiceName: !Join ["-", ["aqua-enforcer", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      TaskDefinition: !Ref AquaEnforcerTaskDefinition
  AquaConsoleSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to Aqua Console Instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref AquaConsoleAccess
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref AquaConsoleAccess
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: !Ref AquaConsoleAccess
        - IpProtocol: tcp
          FromPort: '8442'
          ToPort: '8442'
          CidrIp: !Ref AquaConsoleAccess
        - IpProtocol: tcp
          FromPort: '8089'
          ToPort: '8089'
          CidrIp: !Ref AquaConsoleAccess
  EcsSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 8080 from VPC to console.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref VpcCidr
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
  EcsSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 80 from VPC to gateways for LB health check.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref VpcCidr
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
  EcsSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 8442 from VPC to console Grpc.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref VpcCidr
      IpProtocol: tcp
      FromPort: 8442
      ToPort: 8442
  EcsSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 8443 from VPC to gateway Grpc.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref VpcCidr
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
  EcsSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 8089 from VPC to GW health check.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref VpcCidr
      IpProtocol: tcp
      FromPort: 8089
      ToPort: 8089
  AquaEcsTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ["-", ["AquaEcsTaskRole", !GetAtt RandomString.RandomString]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["AquaScannerPolicy", !GetAtt RandomString.RandomString]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:DescribeImages'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetRepositoryPolicy'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogDelivery'
                  - 'logs:CreateLogStream'
                  - 'logs:TagLogGroup'
                Resource: '*'
              - !Ref 'AWS::NoValue'
        - PolicyName:  !Join ["-", ["AquaSecretsManagerPolicy", !GetAtt RandomString.RandomString]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref SecretP
                  - !Ref Secret1
                  - !Ref SecretU
                  - !Ref SecretAquaPassword
                  - !If
                    - CreateAuditrds
                    - !Ref SecretAuditU
                    - !Ref 'AWS::NoValue'
                  - !If
                    - CreateAuditrds
                    - !Ref SecretAuditP
                    - !Ref 'AWS::NoValue'
                  - !If [ TLSEnable, !Ref TLSRootCA, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaServerCrt, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaServerKey, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaGatewayCrt, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaGatewayKey, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaEnforcerCrt, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaEnforcerKey, !Ref "AWS::NoValue" ]
        - PolicyName: !Join ["-", ["KMSPermisions", !GetAtt RandomString.RandomString]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:Encrypt'
                Resource: '*'
  AquaConsoleLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', ['/aqua/console', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RetentionInDays: 30
  AquaGatewayLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', ['/aqua/gateway', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RetentionInDays: 30
  AquaEnforcerLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', ['/aqua/enforcer', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RetentionInDays: 30    
  LBLogsStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub
        - ${ECSClusterName2}-lb-accesslogs
        - { ECSClusterName2: !Join ["-", ["s3", !GetAtt RandomString.RandomString]] }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: BucketType
          Value: Log
    DeletionPolicy: Delete
  LogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref LBLogsStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ELBAccessLogselbacc
            Effect: Allow
            Resource: !Sub '${LBLogsStoreBucket.Arn}/*'
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - 's3:PutObject'
          - Sid: ELBAccessLogsServiceACL
            Effect: Allow
            Resource: !GetAtt LBLogsStoreBucket.Arn
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - 's3:GetBucketAcl'
          - Sid: ELBAccessLogsServicePut
            Effect: Allow
            Resource: !Sub '${LBLogsStoreBucket.Arn}/*'
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - 's3:PutObject'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  #mysecrets
  SecretU:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua RDS Username
      Name: !Sub 'AquaRdsUsername-${RandomString.RandomString}'
      SecretString: !Ref AquaDBUserName
  SecretP:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua RDS Password
      Name: !Sub 'AquaRdsPassword-${RandomString.RandomString}'
      SecretString: !Ref AquaDBPassword
  SecretAuditU:
    Condition: CreateAuditrds
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Audit RDS Username
      Name: !Sub 'AuditRdsUsername-${RandomString.RandomString}'
      SecretString: !Ref AuditDBUserName
  SecretAuditP:
    Condition: CreateAuditrds
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Audit RDS Password
      Name: !Sub 'AuditRdsPassword-${RandomString.RandomString}'
      SecretString: !Ref AuditDBPassword
  Secret1:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua batch install token
      Name: !Sub 'AquaBatchInstallToken-${RandomString.RandomString}'
      SecretString: !Ref BatchInstallToken
  SecretAquaPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua admin password
      Name: !Sub 'AquaPassword-${RandomString.RandomString}'
      SecretString: !Ref AquaPassword
Outputs:
  AquaConsole:
    Description: URL to access Aqua Security Console
    Value: !Sub 'https://${AquaConsoleLB.DNSName}'
  AquaGatewayExternalConnection:
    Description: >-
      Aqua Enforcer gateway startup connection string for use when Enforcers are
      external to VPC.
    Value: !Sub 'https://${AquaConsoleLB.DNSName}:8443'
  AquaConsoleGrpcConnection:
    Description: >-
      DNS to server gRPC
    Value: !Sub "https://${AquaConsoleLB.DNSName}:8442"
  AquaEcsTaskRole:
    Description: IAM role assigned to access ECR
    Value: !GetAtt AquaEcsTaskRole.Arn
  AquaDBInstanceIdentifier:
    Description : Aqua DB Instance Identifier
    Value : !Ref AquaDBInstanceEndPointURL
    Export :
      Name :
        'Fn::Sub': '${AWS::StackName}-Aqua53DBInstanceID'
  AquaAuditDBInstanceIdentifier:
    Condition: CreateAuditrds
    Description : Aqua audit DB Instance Identifier
    Value : !Ref AuditDBInstanceEndPointURL
    Export :
      Name :
        'Fn::Sub': '${AWS::StackName}-Aqua53AuditDBInstanceID'
