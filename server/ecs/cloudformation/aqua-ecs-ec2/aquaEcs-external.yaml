AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This AWS CloudFormation template installs the Aqua Command Center components
  in ECS EC2.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: ECS Infrastructure Configuration
        Parameters:
          - ECSClusterName
          - EcsSecurityGroupId
          - VpcId
          - VpcCidr
          - LbSubnets
          - SSLCert
          - LBScheme
      - Label:
          default: Aqua Security Configuration
        Parameters:
          - AquaConsoleAccess
          - AquaGatewayAccess
          - AquaConsoleImage
          - AquaGatewayImage
          - AquaEnforcerImage
          - BatchInstallToken
          - ActiveActive
          - Taskprivileged
          - AquaLogLevel
          - AquaPassword
      - Label:
          default: TLS Configuration
        Parameters:
          - TLSEnabled
          - TLSRootCA
          - AquaConsoleCrt
          - AquaConsoleKey
          - AquaGatewayCrt
          - AquaGatewayKey
          - AquaEnforcerCrt
          - AquaEnforcerKey
          - TlsVerify
      - Label:
          default: Aqua Manage DB Configuration
        Parameters:
          - AquaDBInstanceEndPointURL
          - AquaDBUserName
          - AquaDBPassword
          - AuditRDS
          - AuditDBInstanceEndPointURL
          - AuditDBUserName
          - AuditDBPassword
Parameters:
  BatchInstallToken:
    Type: String
    Description: A unique string token used in the Aqua Enforcer Install command.
  AquaConsoleImage:
    Type: String
    Description: >
      The path of the Aqua Console container image in the ECR.
      Specify the complete image URI, including the ECR repository, image name, and tag (e.g., your-ecr-repository/aqua-console:latest).
  AquaGatewayImage:
    Type: String
    Description: >
      The path of the Aqua Gateway container image in the ECR.
      Specify the complete image URI, including the ECR repository, image name, and tag (e.g., your-ecr-repository/aqua-console:latest).
  AquaEnforcerImage:
    Type: String
    Description: >
      The path of the Aqua Enforcer container image in the ECR.
      Specify the complete image URI, including the ECR repository, image name, and tag (e.g., your-ecr-repository/aqua-console:latest).
  ECSClusterName:
    Description: The name of an existing Amazon ECS cluster where you want to deploy the resources.
    Type: String
    MinLength: '5'
    MaxLength: '25'
  EcsSecurityGroupId:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description: >
      The security group ID associated with the Amazon ECS cluster or ECS instances created during cluster formation.
      This security group controls the inbound and outbound traffic for the ECS resources.
  VpcId:
    Description: >
      The ID of the VPC where you want to deploy the resources.
      Specify the VPC ID to associate the stack with a specific networking environment.
    Type: 'AWS::EC2::VPC::Id'
  VpcCidr:
    Description: >
      The CIDR block of the VPC.
      This information is used by the load balancer service for polling purposes.
      Enter the CIDR block in the format, for example, 10.0.0.0/16.
    Type: String
  LbSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: >
      Choose the external subnets where the load balancer will be deployed to enable internet access.
      These subnets determine the availability zones for the load balancer.
  LBScheme:
    Type: String
    Description: >
      Choose the load balancer scheme to define its accessibility:
      - Select "internet-facing" for external access.
      - Choose "internal" for internal access within your VPC.
    Default: internet-facing
    AllowedValues:
      - internet-facing
      - internal
  AquaConsoleAccess:
    Description: >-
      The default (0.0.0.0/0) CIDR range will provide global access for Aqua Console.
      Please update your own IP address or CIDR range to restrict the Aqua Console access.
    Default: 0.0.0.0/0
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  AquaGatewayAccess:
    Description: >-
      The Default (0.0.0.0/0) CIDR range will provide global access for Aqua Gateway.
      Please update your own IP address or CIDR range to restrict the Aqua Gateway access.
    Default: 0.0.0.0/0
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  AquaDBInstanceEndPointURL:
    Description: >
      Enter the Endpoint URL of the Aqua Database.
      This URL is used to establish a connection with the Aqua Database instance.
    Type: String
  AquaDBUserName:
    Description: >
      Enter the username for authentication to the Aqua Database.
      This username is required to access and interact with the Aqua Database.
    Type: String
  AquaDBPassword:
    NoEcho: true
    Description: Enter the password for authentication to the Aqua Database.
    Type: String
  AuditRDS:
    Description: >
      Select "Yes" if you have a separate Amazon RDS endpoint dedicated for audit purposes.
      Choosing "No" indicates that the standard Amazon RDS endpoint will be used.
    Default: 'No'
    Type: String
    AllowedValues: [ 'Yes', 'No' ]
  AuditDBInstanceEndPointURL:
    Description: >
      Enter the Endpoint URL of the dedicated Audit Database.
      This URL is used to establish a connection with the Audit Database instance.
    Type: String
  AuditDBUserName:
    Description: >
      Enter the username for authentication to the Audit Database.
      This username is required to access and interact with the Audit Database.
    Type: String
  AuditDBPassword:
    NoEcho: true
    Description: Enter the password for authentication to the Audit Database.
    Type: String
  SSLCert:
    Type: String
    Description: The ARN of the SSL certificate to be used with the Aqua Console web user interface Load Balancer (LB).
  ActiveActive:
    Description: >
      Enable or disable the Active-Active configuration for the Aqua Console.
      Select "true" to activate Active-Active mode, distributing traffic across multiple instances.
      Select "false" for standard mode with a single active instance.
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  Taskprivileged:
    Description: >
      Choose "true" to run the Aqua Enforcer in privileged mode, allowing elevated privileges.
      Choose "false" to run the Aqua Enforcer in non-privileged mode with reduced privileges.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  TLSEnabled:
    Description: >-
      Enable mTLS/TLS establishment between Aqua Console <-> Aqua Gateway and https for
      Aqua Console
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  TLSRootCA:
    Description: The ARN of the root certificate stored in AWS Secrets Manager.
    Type: String
  AquaConsoleCrt:
    Description: The ARN of the Aqua Console certificate stored in AWS Secrets Manager.
    Type: String
  AquaConsoleKey:
    Description: The ARN of the Aqua Console certificate key stored in AWS Secrets Manager.
    Type: String
  AquaGatewayCrt:
    Description: The ARN of the Aqua Gateway certificate stored in AWS Secrets Manager.
    Type: String
  AquaGatewayKey:
    Description: The ARN of the Aqua Gateway certificate key stored in AWS Secrets Manager.
    Type: String
  AquaEnforcerCrt:
    Description: The ARN of the Aqua Enforcer certificate stored in AWS Secrets Manager.
    Type: String
  AquaEnforcerKey:
    Description: The ARN of the Aqua Enforcer certificate key stored in AWS Secrets Manager.
    Type: String
  TlsVerify:
    Description: Enable mTLS/TLS between Aqua Enforcer and Aqua Gateway
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  AquaLogLevel:
    Description: Aqua log level, by default set to INFO
    Type: String
    Default: "INFO"
    AllowedValues:
      - "WARN"
      - "DEBUG"
      - "INFO"
      - "ERROR"
  AquaPassword:
    Type: String
    Description: Use this Aqua admin password
    NoEcho: true
Conditions:
  CreateActiveActive: !Equals [ !Ref ActiveActive, 'true' ]
  CreateAuditrds: !Equals [ !Ref AuditRDS, 'Yes' ]
  TLSEnable: !Equals
    - !Ref TLSEnabled
    - 'true'
  AquaTlsVerify: !Equals
    - !Ref TlsVerify
    - 'true'
Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: '*'
  RandomStringLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import cfnresponse
          from random import choice
          from string import ascii_lowercase, digits
          def random_string(length=8, chars=ascii_lowercase + digits):
            return "".join(choice(chars) for x in range(length))
          def lambda_handler(event, context):
            print(f"Data in event: {event}")
            response_data = {}
            if event["RequestType"] == "Create":
              string_length = int(event["ResourceProperties"]["Length"])
              physicalResourceId = random_string(string_length)
              response_data = { "RandomString": physicalResourceId }

            else: # if event["RequestType"] == "Update" or event["RequestType"] == "Delete":
              physicalResourceId = event["PhysicalResourceId"]
            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)
  RandomString:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      Length: 5
      ServiceToken: !GetAtt RandomStringLambdaFunction.Arn
  AquaConsoleLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - EcsSecurityGroupIngress1
      - EcsSecurityGroupIngress2
      - EcsSecurityGroupIngress3
    Properties:
      Name: !Sub 'AquaConsoleLB-${RandomString}'
      Scheme: !Ref LBScheme
      SecurityGroups:
        - !Ref AquaConsoleSecurityGroup
      Subnets: !Ref LbSubnets
      Type: application
  AquaConsoleTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub 'aqua-console-td-${RandomString}'
      RequiresCompatibilities:
        - EC2
      Volumes:
        - Host:
            SourcePath: /var/run/docker.sock
          Name: docker-socket
        - !If
          - TLSEnable
          - Name: secret-vol
            DockerVolumeConfiguration:
              Scope: task
              Driver: local
          - !Ref 'AWS::NoValue'
      ContainerDefinitions:
        - Name: !Sub 'aqua-console-td-${RandomString}'
          Image: !Ref AquaConsoleImage
          Cpu: '1024'
          Ulimits:
            - Name: nofile
              SoftLimit: '1048576'
              HardLimit: '1048576'
          MountPoints:
            - ContainerPath: /var/run/docker.sock
              SourceVolume: docker-socket
            - !If
              - TLSEnable
              - ContainerPath: /opt/aquasec/ssl
                SourceVolume: secret-vol
              - !Ref 'AWS::NoValue'
          PortMappings:
            - ContainerPort: '8080'
              HostPort: '8080'
              Protocol: tcp
            - ContainerPort: '8443'
              HostPort: '8442'
              Protocol: tcp
          Memory: '2048'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AquaConsoleLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: aquaConsole
          Essential: true
          Secrets:
            - Name: SCALOCK_DBPASSWORD
              ValueFrom: !Ref SecretRDSPassword
            - Name: SCALOCK_AUDIT_DBPASSWORD
              ValueFrom: !If [ CreateAuditrds, !Ref SecretAuditPassword, !Ref SecretRDSPassword ]
            - Name: SCALOCK_DBUSER
              ValueFrom: !Ref SecretRDSUsername
            - Name: SCALOCK_AUDIT_DBUSER
              ValueFrom: !If [ CreateAuditrds, !Ref SecretAuditUsername, !Ref SecretRDSUsername ]
            - Name: BATCH_INSTALL_TOKEN
              ValueFrom: !Ref SecretBatchToken
            - Name: AQUA_PUBSUB_DBPASSWORD
              ValueFrom: !Ref SecretRDSPassword
            - Name: AQUA_PUBSUB_DBUSER
              ValueFrom: !Ref SecretRDSUsername
            - Name: ADMIN_PASSWORD
              ValueFrom: !Ref SecretAquaPassword
          Environment:
            - Name: SCALOCK_LOG_LEVEL
              Value: !Ref AquaLogLevel
            - Name: AQUA_GRPC_MODE
              Value: 1
            - Name: SCALOCK_DBSSL
              Value: require
            - Name: SCALOCK_AUDIT_DBSSL
              Value: require
            - Name: SCALOCK_DBNAME
              Value: scalock
            - Name: SCALOCK_DBHOST
              Value: !Ref AquaDBInstanceEndPointURL
            - Name: SCALOCK_AUDIT_DBNAME
              Value: slk_audit
            - Name: SCALOCK_AUDIT_DBHOST
              Value: !If [ CreateAuditrds, !Ref AuditDBInstanceEndPointURL, !Ref AquaDBInstanceEndPointURL ]
            - Name: AQUA_PUBSUB_DBSSL
              Value: !If [ CreateActiveActive, require, !Ref "AWS::NoValue" ]
            - Name: AQUA_PUBSUB_DBNAME
              Value: !If [ CreateActiveActive, pubsub, !Ref "AWS::NoValue" ]
            - Name: AQUA_PUBSUB_DBHOST
              Value: !If [ CreateActiveActive, !Ref AquaDBInstanceEndPointURL, !Ref "AWS::NoValue" ]
            - Name: AQUA_CLUSTER_MODE
              Value: !If [ CreateActiveActive, active-active, !Ref "AWS::NoValue" ]
            - Name: AQUA_PRIVATE_KEY
              Value: !If [ TLSEnable, /opt/aquasec/ssl/key.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_PUBLIC_KEY
              Value: !If [ TLSEnable, /opt/aquasec/ssl/cert.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_ROOT_CA
              Value: !If [ TLSEnable, /opt/aquasec/ssl/root_ca.pem, !Ref "AWS::NoValue" ]
        - !If
          - TLSEnable
          - Name: secret-sidecar-root-ca
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaConsoleLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-root-ca
            Environment:
              - Name: SECRET_ARN
                Value: !Ref TLSRootCA
              - Name: SECRET_FILENAME
                Value: root_ca.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-console-crt
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaConsoleLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-console-crt
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaConsoleCrt
              - Name: SECRET_FILENAME
                Value: cert.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-console-key
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaConsoleLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-console-key
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaConsoleKey
              - Name: SECRET_FILENAME
                Value: key.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
      NetworkMode: bridge
      TaskRoleArn: !GetAtt AquaEcsTaskRole.Arn
      ExecutionRoleArn: !GetAtt AquaEcsTaskRole.Arn
  AquaConsoleService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - AquaConsoleListener
      - AquaConsoleGrpcListener
    Properties:
      Cluster: !Ref ECSClusterName
      LaunchType: EC2
      ServiceName: !Sub 'aqua-console-td-${RandomString}'
      DesiredCount: '1'
      PlacementStrategies:
        - Type: spread
          Field: 'attribute:ecs.availability-zone'
        - Type: spread
          Field: instanceId
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '50'
      LoadBalancers:
        - ContainerName: !Sub 'aqua-console-td-${RandomString}'
          ContainerPort: '8080'
          TargetGroupArn: !Ref AquaConsoleHealthTargetGroup
        - ContainerName: !Sub 'aqua-console-td-${RandomString}'
          ContainerPort: '8443'
          TargetGroupArn: !Ref AquaConsoleGrpcTargetGroup
      TaskDefinition: !Ref AquaConsoleTaskDefinition
  AquaConsoleListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AquaConsoleHealthTargetGroup
      LoadBalancerArn: !Ref AquaConsoleLB
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCert
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
  AquaConsoleGrpcListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AquaConsoleGrpcTargetGroup
      LoadBalancerArn: !Ref AquaConsoleLB
      Port: '8442'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCert
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
  AquaConsoleHealthTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - AquaConsoleLB
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Name: !Sub 'aqua-console-health-tg-${RandomString}'
      Port: '8080'
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  AquaConsoleGrpcTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - AquaConsoleLB
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthyThresholdCount: 2
      HealthCheckPath: "/"
      Matcher:
        GrpcCode: '0-99'
      Name: !Sub 'aqua-console-grpc-tg-${RandomString}'
      Port: '8442'
      Protocol: HTTPS
      ProtocolVersion: GRPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
  AquaGatewayGrpcListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - AquaConsoleGrpcTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AquaGatewayGrpcTargetGroup
      LoadBalancerArn: !Ref AquaGatewayLB
      Port: '8443'
      Protocol: TCP
  AquaGatewayGrpcTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - AquaGatewayLB
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Name: !Sub 'aqua-gateway-grpc-tg-${RandomString}'
      Port: '8443'
      Protocol: TCP
      VpcId: !Ref VpcId
  AquaGatewayHealthListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - AquaGatewayGrpcTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AquaGatewayHealthTargetGroup
      LoadBalancerArn: !Ref AquaGatewayLB
      Port: '8089'
      Protocol: TCP
  AquaGatewayHealthTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - AquaGatewayLB
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Sub 'aqua-gateway-health-tg-${RandomString}'
      Port: '8089'
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  AquaGatewayLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - EcsSecurityGroupIngress4
      - EcsSecurityGroupIngress5
    Properties:
      Name: !Sub 'AquaGatewayLB-${RandomString}'
      Scheme: !Ref LBScheme
      SecurityGroups:
        - !Ref AquaGatewaySecurityGroup
      Subnets: !Ref LbSubnets
      Type: network
  AquaGatewayTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub 'aqua-gateway-td-${RandomString}'
      TaskRoleArn: !GetAtt AquaEcsTaskRole.Arn
      ExecutionRoleArn: !GetAtt AquaEcsTaskRole.Arn
      RequiresCompatibilities:
        - EC2
      Volumes:
        - !If
          - TLSEnable
          - Name: secret-vol
            DockerVolumeConfiguration:
              Scope: task
              Driver: local
          - !Ref 'AWS::NoValue'
      ContainerDefinitions:
        - Name: !Sub 'aqua-gateway-td-${RandomString}'
          Image: !Ref AquaGatewayImage
          Ulimits:
            - Name: nofile
              SoftLimit: '1048576'
              HardLimit: '1048576'
          MountPoints:
            - !If
              - TLSEnable
              - ContainerPath: /opt/aquasec/ssl
                SourceVolume: secret-vol
              - !Ref 'AWS::NoValue'
          PortMappings:
            - ContainerPort: '8443'
              HostPort: '8443'
              Protocol: tcp
            - ContainerPort: '8089'
              HostPort: '8089'
              Protocol: tcp
          Cpu: '1024'
          Memory: '2048'
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AquaGatewayLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: aquaGateway
          Secrets:
            - Name: SCALOCK_DBPASSWORD
              ValueFrom: !Ref SecretRDSPassword
            - Name: SCALOCK_AUDIT_DBPASSWORD
              ValueFrom: !If [ CreateAuditrds, !Ref SecretAuditPassword, !Ref SecretRDSPassword ]
            - Name: SCALOCK_DBUSER
              ValueFrom: !Ref SecretRDSUsername
            - Name: SCALOCK_AUDIT_DBUSER
              ValueFrom: !If [ CreateAuditrds, !Ref SecretAuditUsername, !Ref SecretRDSUsername ]
          Environment:
            - Name: SCALOCK_LOG_LEVEL
              Value: !Ref AquaLogLevel
            - Name: SCALOCK_DBSSL
              Value: require
            - Name: SCALOCK_AUDIT_DBSSL
              Value: require
            - Name: HEALTH_MONITOR
              Value: '0.0.0.0:8089'
            - Name: SCALOCK_DBNAME
              Value: scalock
            - Name: SCALOCK_DBHOST
              Value: !Ref AquaDBInstanceEndPointURL
            - Name: SCALOCK_AUDIT_DBNAME
              Value: slk_audit
            - Name: SCALOCK_AUDIT_DBHOST
              Value: !If [ CreateAuditrds, !Ref AuditDBInstanceEndPointURL, !Ref AquaDBInstanceEndPointURL ]
            - Name: AQUA_CONSOLE_SECURE_ADDRESS
              Value: !Sub "${AquaConsoleLB.DNSName}:8442"
            - Name: AQUA_PRIVATE_KEY
              Value: !If [ TLSEnable, /opt/aquasec/ssl/key.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_PUBLIC_KEY
              Value: !If [ TLSEnable, /opt/aquasec/ssl/cert.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_ROOT_CA
              Value: !If [ TLSEnable, /opt/aquasec/ssl/root_ca.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_VERIFY_ENFORCER
              Value: !If
                - AquaTlsVerify
                - "1"
                - "0"
        - !If
          - TLSEnable
          - Name: secret-sidecar-root-ca
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaGatewayLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-root-ca
            Environment:
              - Name: SECRET_ARN
                Value: !Ref TLSRootCA
              - Name: SECRET_FILENAME
                Value: root_ca.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-gateway-crt
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaGatewayLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-gateway-crt
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaGatewayCrt
              - Name: SECRET_FILENAME
                Value: cert.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-gateway-key
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaGatewayLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-gateway-key
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaGatewayKey
              - Name: SECRET_FILENAME
                Value: key.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
      NetworkMode: bridge
  AquaGatewayService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - AquaGatewayLB
      - AquaGatewayHealthListener
      - AquaGatewayGrpcListener
      - EcsSecurityGroupIngress4
    Properties:
      Cluster: !Ref ECSClusterName
      ServiceName: !Sub 'aqua-gateway-td-${RandomString}'
      DesiredCount: '1'
      PlacementStrategies:
        - Type: spread
          Field: 'attribute:ecs.availability-zone'
        - Type: spread
          Field: instanceId
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '50'
      LoadBalancers:
        - ContainerName: !Sub 'aqua-gateway-td-${RandomString}'
          ContainerPort: '8443'
          TargetGroupArn: !Ref AquaGatewayGrpcTargetGroup
        - ContainerName: !Sub 'aqua-gateway-td-${RandomString}'
          ContainerPort: '8089'
          TargetGroupArn: !Ref AquaGatewayHealthTargetGroup
      TaskDefinition: !Ref AquaGatewayTaskDefinition
  AquaEnforcerTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - AquaGatewayService
    Properties:
      PidMode: 'host'
      ContainerDefinitions:
        - Memory: '1024'
          Essential: true
          MountPoints:
            - ContainerPath: /var/run
              SourceVolume: var-run
            - ContainerPath: /dev
              SourceVolume: dev
            - ContainerPath: /host/opt/aquasec
              SourceVolume: aquasec
              ReadOnly: true
            - ContainerPath: /opt/aquasec/tmp
              SourceVolume: aquasec-tmp
            - ContainerPath: /opt/aquasec/audit
              SourceVolume: aquasec-audit
            - ContainerPath: /data
              SourceVolume: data
            - ContainerPath: /host/proc
              SourceVolume: proc
              ReadOnly: true
            - ContainerPath: /host/sys
              SourceVolume: sys
              ReadOnly: true
            - ContainerPath: /host/etc
              SourceVolume: etc
              ReadOnly: true
            - !If
              - TLSEnable
              - ContainerPath: /opt/aquasec/ssl
                SourceVolume: secret-vol
              - !Ref 'AWS::NoValue'
          Name: aqua-enforcer
          Privileged: !Ref Taskprivileged
          LinuxParameters:
            Capabilities:
              Add:
                - SYS_ADMIN
                - NET_ADMIN
                - NET_RAW
                - SYS_PTRACE
                - KILL
                - MKNOD
                - SETGID
                - SETUID
                - SYS_MODULE
                - AUDIT_CONTROL
                - SYSLOG
                - SYS_CHROOT
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AquaEnforcerLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: aquaEnforcer
          Secrets:
            - Name: AQUA_TOKEN
              ValueFrom: !Ref SecretBatchToken
          Environment:
            - Name: SCALOCK_LOG_LEVEL
              Value: !Ref AquaLogLevel
            - Name: AQUA_SERVER
              Value: !Sub '${AquaGatewayLB.DNSName}:8443'
            - Name: SILENT
              Value: 'yes'
            - Name: RESTART_CONTAINERS
              Value: 'no'
            - Name: AQUA_LOGICAL_NAME
              Value: !Sub 'aqua-enf-td-${RandomString}-ECS'
            - Name: AQUA_PRIVATE_KEY
              Value: !If [ TLSEnable, /opt/aquasec/ssl/key.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_PUBLIC_KEY
              Value: !If [ TLSEnable, /opt/aquasec/ssl/cert.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_ROOT_CA
              Value: !If [ TLSEnable, /opt/aquasec/ssl/root_ca.pem, !Ref "AWS::NoValue" ]
            - Name: AQUA_TLS_VERIFY
              Value: !Ref TlsVerify
          Image: !Ref AquaEnforcerImage
          Cpu: '512'
        - !If
          - TLSEnable
          - Name: secret-sidecar-root-ca
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaEnforcerLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-root-ca
            Environment:
              - Name: SECRET_ARN
                Value: !Ref TLSRootCA
              - Name: SECRET_FILENAME
                Value: root_ca.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-enforcer-crt
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaEnforcerLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-enforcer-crt
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaEnforcerCrt
              - Name: SECRET_FILENAME
                Value: cert.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
        - !If
          - TLSEnable
          - Name: secret-sidecar-enforcer-key
            Image: public.ecr.aws/aws-containers/aws-secrets-manager-secret-sidecar:v0.1.4
            Cpu: '0'
            Memory: '128'
            Essential: false
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AquaEnforcerLogGroup
                awslogs-region: !Ref "AWS::Region"
                awslogs-stream-prefix: secret-sidecar-enforcer-key
            Environment:
              - Name: SECRET_ARN
                Value: !Ref AquaEnforcerKey
              - Name: SECRET_FILENAME
                Value: key.pem
            MountPoints:
              - ContainerPath: /tmp
                SourceVolume: secret-vol
          - !Ref 'AWS::NoValue'
      Volumes:
        - Host:
            SourcePath: /var/run
          Name: var-run
        - Host:
            SourcePath: /dev
          Name: dev
        - Host:
            SourcePath: /opt/aquasec/data
          Name: data
        - Host:
            SourcePath: /opt/aquasec
          Name: aquasec
        - Host:
            SourcePath: /opt/aquasec/tmp
          Name: aquasec-tmp
        - Host:
            SourcePath: /opt/aquasec/audit
          Name: aquasec-audit
        - Host:
            SourcePath: /proc
          Name: proc
        - Host:
            SourcePath: /sys
          Name: sys
        - Host:
            SourcePath: /etc
          Name: etc
        - !If
          - TLSEnable
          - Name: secret-vol
            DockerVolumeConfiguration:
              Scope: task
              Driver: local
          - !Ref 'AWS::NoValue'
      Family: !Sub 'aqua-enforcer-td-${RandomString}'
      TaskRoleArn: !GetAtt AquaEcsTaskRole.Arn
      ExecutionRoleArn: !GetAtt AquaEcsTaskRole.Arn
  AquaEnforcerDaemon:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSClusterName
      SchedulingStrategy: DAEMON
      LaunchType: EC2
      ServiceName: !Sub 'aqua-enforcer-td-${RandomString}'
      TaskDefinition: !Ref AquaEnforcerTaskDefinition
  AquaConsoleSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub 'AquaConsolSG-${RandomString}'
      GroupDescription: Allow access to Aqua Console Instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref AquaConsoleAccess
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref AquaConsoleAccess
        - IpProtocol: tcp
          FromPort: '8442'
          ToPort: '8442'
          CidrIp: !Ref AquaConsoleAccess
  AquaGatewaySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub 'AquaGatewaySG-${RandomString}'
      GroupDescription: Allow access to Aqua Gateway Instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: !Ref AquaGatewayAccess
        - IpProtocol: tcp
          FromPort: '8089'
          ToPort: '8089'
          CidrIp: !Ref AquaGatewayAccess
  EcsSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 8080 from VPC to console.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref VpcCidr
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
  EcsSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 80 from VPC to gateways for LB health check.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref VpcCidr
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
  EcsSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 8442 from VPC to console Grpc.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref VpcCidr
      IpProtocol: tcp
      FromPort: 8442
      ToPort: 8442
  EcsSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 8443 from VPC to gateway Grpc.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref AquaGatewayAccess
      IpProtocol: tcp
      FromPort: 8443
      ToPort: 8443
  EcsSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allows inbound port 8089 from VPC to GW health check.
      GroupId: !Ref EcsSecurityGroupId
      CidrIp: !Ref AquaGatewayAccess
      IpProtocol: tcp
      FromPort: 8089
      ToPort: 8089
  AquaEcsTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'AquaEcsTaskRole-${RandomString}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'AquaScannerPolicy-${RandomString}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:DescribeImages'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetRepositoryPolicy'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogDelivery'
                  - 'logs:CreateLogStream'
                  - 'logs:TagLogGroup'
                Resource: '*'
              - !Ref 'AWS::NoValue'
        - PolicyName: !Sub 'AquaSecretsManagerPolicy-${RandomString}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref SecretRDSPassword
                  - !Ref SecretBatchToken
                  - !Ref SecretRDSUsername
                  - !Ref SecretAquaPassword
                  - !If
                    - CreateAuditrds
                    - !Ref SecretAuditUsername
                    - !Ref 'AWS::NoValue'
                  - !If
                    - CreateAuditrds
                    - !Ref SecretAuditPassword
                    - !Ref 'AWS::NoValue'
                  - !If [ TLSEnable, !Ref TLSRootCA, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaConsoleCrt, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaConsoleKey, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaGatewayCrt, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaGatewayKey, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaEnforcerCrt, !Ref "AWS::NoValue" ]
                  - !If [ TLSEnable, !Ref AquaEnforcerKey, !Ref "AWS::NoValue" ]
        - PolicyName: !Sub 'KMSPermisions-${RandomString}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:Encrypt'
                Resource: '*'
  AquaConsoleLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join [ '-', [ '/aqua/console', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
      RetentionInDays: 30
  AquaGatewayLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join [ '-', [ '/aqua/gateway', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
      RetentionInDays: 30
  AquaEnforcerLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join [ '-', [ '/aqua/enforcer', !Join [ "-", [ "td", !GetAtt RandomString.RandomString ] ] ] ]
      RetentionInDays: 30
  LBLogsStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub
        - ${ECSClusterName2}-lb-accesslogs
        - { ECSClusterName2: !Join ["-", ["s3", !GetAtt RandomString.RandomString]] }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: BucketType
          Value: Log
    DeletionPolicy: Delete
  LogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref LBLogsStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ELBAccessLogselbacc
            Effect: Allow
            Resource: !Sub '${LBLogsStoreBucket.Arn}/*'
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - 's3:PutObject'
          - Sid: ELBAccessLogsServiceACL
            Effect: Allow
            Resource: !GetAtt LBLogsStoreBucket.Arn
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - 's3:GetBucketAcl'
          - Sid: ELBAccessLogsServicePut
            Effect: Allow
            Resource: !Sub '${LBLogsStoreBucket.Arn}/*'
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - 's3:PutObject'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  SecretRDSUsername:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua RDS Username
      Name: !Sub 'AquaRdsUsername-${RandomString}'
      SecretString: !Ref AquaDBUserName
  SecretRDSPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua RDS Password
      Name: !Sub 'AquaRdsPassword-${RandomString}'
      SecretString: !Ref AquaDBPassword
  SecretBatchToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua batch install token
      Name: !Sub 'AquaBatchInstallToken-${RandomString}'
      SecretString: !Ref BatchInstallToken
  SecretAuditUsername:
    Condition: CreateAuditrds
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Audit RDS Username
      Name: !Sub 'AuditRdsUsername-${RandomString}'
      SecretString: !Ref AuditDBUserName
  SecretAuditPassword:
    Condition: CreateAuditrds
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Audit RDS Password
      Name: !Sub 'AuditRdsPassword-${RandomString}'
      SecretString: !Ref AuditDBPassword
  SecretAquaPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua Admin Password
      Name: !Sub 'AquaPassword-${RandomString}'
      SecretString: !Ref AquaPassword
Outputs:
  AquaConsole:
    Description: URL to access Aqua Security Console
    Value: !Sub 'https://${AquaConsoleLB.DNSName}'
  AquaGatewayExternalConnection:
    Description: >-
      Aqua Enforcer gateway startup connection string for use when Enforcers are
      external to VPC.
    Value: !Sub 'https://${AquaGatewayLB.DNSName}:8443'
  AquaConsoleGrpcConnection:
    Description: >-
      DNS to Aqua Console gRPC
    Value: !Sub "https://${AquaConsoleLB.DNSName}:8442"
  AquaEcsTaskRole:
    Description: IAM role assigned to access ECR
    Value: !GetAtt AquaEcsTaskRole.Arn
  AquaDBInstanceIdentifier:
    Description: Aqua DB Instance Identifier
    Value: !Ref AquaDBInstanceEndPointURL
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-Aqua53DBInstanceID'
  AquaAuditDBInstanceIdentifier:
    Condition: CreateAuditrds
    Description: Aqua audit DB Instance Identifier
    Value: !Ref AuditDBInstanceEndPointURL
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-Aqua53AuditDBInstanceID'